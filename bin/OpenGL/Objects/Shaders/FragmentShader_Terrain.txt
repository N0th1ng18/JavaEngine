#version 400

uniform sampler2D colorTexture;
uniform sampler2D normalMap;
uniform sampler2D specularMap;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambient;
uniform vec3 lightColor[20];
uniform float attenuationRadius[20];
uniform int numLights;
uniform vec3 fogColor;

in vec2 teTexCoord;
in vec3 toLightVector[20];
in vec3 toCameraVector;
in float visibility;

in vec3 sendNormal;

out vec4 out_Color;

void main() {
		
		vec4 normalMapValue = 2.0 * texture(normalMap, teTexCoord) - 1.0;
		
		vec3 unitNormal = normalize(normalMapValue.rgb);
		vec3 unitVectorToCamera = normalize(toCameraVector);
		
		vec3 totalDiffuse = vec3(0.0);
		vec3 totalSpecular = vec3(0.0);
			
		//Go through each light
		for(int i=0; i < numLights;i++){
		
			/*Distance*/
				float distance = length(toLightVector[i]);	//Distance from point to light source
				
				if(distance <= attenuationRadius[i]){
					/*Attenuation*/
						float attFactor = clamp(1.0 - distance*distance/(attenuationRadius[i]*attenuationRadius[i]), 0.0, 1.0);attFactor *= attFactor; //softer formula
						//float attFactor = clamp(1.0 - distance/attenuationRadius[i], 0.0, 1.0); attFactor *= attFactor; //sharper formula
					
					/*Diffuse Lighting*/
							vec3 unitLightVector = normalize(toLightVector[i]);
							float nDot1 = dot(unitNormal, unitLightVector);
							float brightness = max(nDot1, 0.0);
						totalDiffuse = totalDiffuse + ((brightness * lightColor[i])*attFactor);
				
					/*Specular Lighting*/
							vec3 lightDirection = -unitLightVector;
							vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
							float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
							specularFactor = max(specularFactor, 0.0);
							float dampedFactor = pow(specularFactor, shineDamper);
							float reflect = texture(specularMap, teTexCoord).x * 0.5 * reflectivity;
						totalSpecular = totalSpecular + ((dampedFactor * reflect * lightColor[i])*attFactor);
				}
		}
		
		totalDiffuse = max(totalDiffuse, ambient);
	
		out_Color = texture2D(colorTexture, teTexCoord) * vec4(totalDiffuse, 1.0) + vec4(totalSpecular, 1.0);
		out_Color = mix(vec4(fogColor, 1.0), out_Color, visibility);
		
		//out_Color = vec4(sendNormal, 1.0);
		
}