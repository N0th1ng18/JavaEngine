#version 400


layout (vertices = 1) out;

uniform vec3 cameraPos;

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec2 TexCoordPerInstance[3];
    vec3 Normal[3];
    vec3 Tangent[3];
    vec3 Bitangent[3];
    
};

in vec3 vPosition[];
in vec2 vPerInstanceTexCoords[];
in vec3 vNormals[];
in vec3 vTangent[];
in vec3 vBitangent[];

out patch OutputPatch oPatch;


float GetTessLevel(float Distance0, float Distance1)
{
    float AvgDistance = (Distance0 + Distance1) / 2.0;
	
	
	if(AvgDistance > 4000){
		return 1.0;
	}else if(AvgDistance > 2200){
		return 4.0;
	}else if(AvgDistance > 1000){
		return 8.0;
	}else if(AvgDistance > 850){
		return 24.0;
	}else if(AvgDistance > 800){
		return 32.0;	
	}else if(AvgDistance > 650){
		return 40.0;
	}else{
		return 64.0;
	}
	
	//return clamp(1000.0/pow(AvgDistance, 0.5) - 18.0, 1.0, 64.0);
	
}

vec3 ProjectToPlane(vec3 Point, vec3 PlanePoint, vec3 PlaneNormal)
{
    vec3 v = Point - PlanePoint;
    float Len = dot(v, PlaneNormal);
    vec3 d = Len * PlaneNormal;
    return (Point - d);
}

void CalcPositions()
{
    // The original vertices stay the same
    oPatch.WorldPos_B030 = vPosition[0];
    oPatch.WorldPos_B003 = vPosition[1];
    oPatch.WorldPos_B300 = vPosition[2];

    // Edges are named according to the opposing vertex
    vec3 EdgeB300 = oPatch.WorldPos_B003 - oPatch.WorldPos_B030;
    vec3 EdgeB030 = oPatch.WorldPos_B300 - oPatch.WorldPos_B003;
    vec3 EdgeB003 = oPatch.WorldPos_B030 - oPatch.WorldPos_B300;

    // Generate two midpoints on each edge
    oPatch.WorldPos_B021 = oPatch.WorldPos_B030 + EdgeB300 / 3.0;
    oPatch.WorldPos_B012 = oPatch.WorldPos_B030 + EdgeB300 * 2.0 / 3.0;
    oPatch.WorldPos_B102 = oPatch.WorldPos_B003 + EdgeB030 / 3.0;
    oPatch.WorldPos_B201 = oPatch.WorldPos_B003 + EdgeB030 * 2.0 / 3.0;
    oPatch.WorldPos_B210 = oPatch.WorldPos_B300 + EdgeB003 / 3.0;
    oPatch.WorldPos_B120 = oPatch.WorldPos_B300 + EdgeB003 * 2.0 / 3.0;

    // Project each midpoint on the plane defined by the nearest vertex and its normal
    oPatch.WorldPos_B021 = ProjectToPlane(oPatch.WorldPos_B021, oPatch.WorldPos_B030,
                                          oPatch.Normal[0]);
    oPatch.WorldPos_B012 = ProjectToPlane(oPatch.WorldPos_B012, oPatch.WorldPos_B003,
                                         oPatch.Normal[1]);
    oPatch.WorldPos_B102 = ProjectToPlane(oPatch.WorldPos_B102, oPatch.WorldPos_B003,
                                         oPatch.Normal[1]);
    oPatch.WorldPos_B201 = ProjectToPlane(oPatch.WorldPos_B201, oPatch.WorldPos_B300,
                                         oPatch.Normal[2]);
    oPatch.WorldPos_B210 = ProjectToPlane(oPatch.WorldPos_B210, oPatch.WorldPos_B300,
                                         oPatch.Normal[2]);
    oPatch.WorldPos_B120 = ProjectToPlane(oPatch.WorldPos_B120, oPatch.WorldPos_B030,
                                         oPatch.Normal[0]);

    // Handle the center
    vec3 Center = (oPatch.WorldPos_B003 + oPatch.WorldPos_B030 + oPatch.WorldPos_B300) / 3.0;
    oPatch.WorldPos_B111 = (oPatch.WorldPos_B021 + oPatch.WorldPos_B012 + oPatch.WorldPos_B102 +
                          oPatch.WorldPos_B201 + oPatch.WorldPos_B210 + oPatch.WorldPos_B120) / 6.0;
    oPatch.WorldPos_B111 += (oPatch.WorldPos_B111 - Center) / 2.0;
}

void main() {
	
	for (int i = 0 ; i < 3 ; i++) {
       oPatch.TexCoordPerInstance[i] = vPerInstanceTexCoords[i];
       oPatch.Normal[i] = vNormals[i];
       oPatch.Tangent[i] = vTangent[i];
       oPatch.Bitangent[i] = vBitangent[i];
    }
	
	CalcPositions();
	
	float EyeToVertexDistance0 = distance(cameraPos, vPosition[0]);
    float EyeToVertexDistance1 = distance(cameraPos, vPosition[1]);
    float EyeToVertexDistance2 = distance(cameraPos, vPosition[2]);
	
	if(gl_InvocationID == 0){
	
		gl_TessLevelOuter[0] = GetTessLevel(EyeToVertexDistance1, EyeToVertexDistance2);
		gl_TessLevelOuter[1] = GetTessLevel(EyeToVertexDistance2, EyeToVertexDistance0);
		gl_TessLevelOuter[2] = GetTessLevel(EyeToVertexDistance0, EyeToVertexDistance1);
		gl_TessLevelInner[0] = gl_TessLevelOuter[2];
		
	}
	
}