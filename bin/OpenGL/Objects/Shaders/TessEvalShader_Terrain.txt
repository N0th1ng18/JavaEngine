#version 400

layout(triangles, fractional_odd_spacing, ccw) in;

const float density = 0.0001; //Distance when fog starts
const float gradient = 2.0;	//Rate of Change

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform sampler2D heightMap;
uniform float heightIntensity;
uniform sampler2D displacementMap;
uniform float displacementIntensity;
uniform vec3 lightPosition[20];
uniform int numLights;

struct OutputPatch
{
    vec3 WorldPos_B030;
    vec3 WorldPos_B021;
    vec3 WorldPos_B012;
    vec3 WorldPos_B003;
    vec3 WorldPos_B102;
    vec3 WorldPos_B201;
    vec3 WorldPos_B300;
    vec3 WorldPos_B210;
    vec3 WorldPos_B120;
    vec3 WorldPos_B111;
    vec2 TexCoord[3];
    vec3 Normal[3];
    vec3 Tangent[3];
    vec3 Bitangent[3];
    float MipLevels[3];
};

in patch OutputPatch oPatch;

out vec2 teTexCoord;
out vec3 toLightVector[20];
out vec3 toCameraVector;
out float visibility;

out vec3 sendNormal;
 
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
	
	return v0 * vec3(gl_TessCoord.x) + v1 * vec3(gl_TessCoord.y) + v2 * vec3(gl_TessCoord.z);
	
}

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
	
	return v0 * vec2(gl_TessCoord.x) + v1 * vec2(gl_TessCoord.y) + v2 * vec2(gl_TessCoord.z);
	
}

float interpolate1D(float v0, float v1, float v2) {

	if(gl_TessCoord.x != 0.0 && gl_TessCoord.y != 0.0 && gl_TessCoord.z != 0.0){
		return v0 * gl_TessCoord.x + v1 * gl_TessCoord.y + v2 * gl_TessCoord.z;
	}

	if(gl_TessCoord.x == 0.0 && gl_TessCoord.y != 0.0 && gl_TessCoord.z != 0.0){
		return v0;
	}
	if(gl_TessCoord.x != 0.0 && gl_TessCoord.y == 0.0 && gl_TessCoord.z != 0.0){
		return v1;
	}
	if(gl_TessCoord.x != 0.0 && gl_TessCoord.y != 0.0 && gl_TessCoord.z == 0.0){
		return v2;
	}
	
	return 0.0;
	
	
	
}

float getHeight(vec2 location){

	return (2.0*texture(heightMap, location).x-1.0) * heightIntensity;
}

 
void main() {

	// Interpolate
	    teTexCoord = interpolate2D(oPatch.TexCoord[0], oPatch.TexCoord[1], oPatch.TexCoord[2]);
	    vec3 normal = interpolate3D(oPatch.Normal[0], oPatch.Normal[1], oPatch.Normal[2]);
	    vec3 tangent = interpolate3D(oPatch.Tangent[0], oPatch.Tangent[1], oPatch.Tangent[2]);
	    vec3 bitangent = interpolate3D(oPatch.Bitangent[0], oPatch.Bitangent[1], oPatch.Bitangent[2]);
     
     	normal = normalize(normal);
     	tangent = normalize(tangent);
     	bitangent = normalize(bitangent);
   
   // Plug the barycentric coordinates into the Bezier triangle equation
	    float u = gl_TessCoord.x;
	    float v = gl_TessCoord.y;
	    float w = gl_TessCoord.z;
	
	    float uPow3 = pow(u, 3);
	    float vPow3 = pow(v, 3);
	    float wPow3 = pow(w, 3);
	    float uPow2 = pow(u, 2);
	    float vPow2 = pow(v, 2);
	    float wPow2 = pow(w, 2);
	
	    vec3 position = oPatch.WorldPos_B300 * wPow3 +
	                    oPatch.WorldPos_B030 * uPow3 +
	                    oPatch.WorldPos_B003 * vPow3 +
	                    oPatch.WorldPos_B210 * 3.0 * wPow2 * u +
	                    oPatch.WorldPos_B120 * 3.0 * w * uPow2 +
	                    oPatch.WorldPos_B201 * 3.0 * wPow2 * v +
	                    oPatch.WorldPos_B021 * 3.0 * uPow2 * v +
	                    oPatch.WorldPos_B102 * 3.0 * w * vPow2 +
	                    oPatch.WorldPos_B012 * 3.0 * u * vPow2 +
	                    oPatch.WorldPos_B111 * 6.0 * w * u * v;
	                    
	// Displacement Map 
		float mipmapLevel = interpolate1D(oPatch.MipLevels[0], oPatch.MipLevels[1], oPatch.MipLevels[2]);
		
    	float displacement = textureLod(displacementMap, teTexCoord, mipmapLevel).x;
    	position += normal * displacement * displacementIntensity;                 
   
   sendNormal = normal;
   
   // We transform the world space position to clip spaces
		vec4 positionRelativeToCamera = viewMatrix * vec4(position,1.0);
		gl_Position = projectionMatrix * positionRelativeToCamera;
    
   // Create To Tangent Space
	    normal = normalize((viewMatrix * vec4(normal,0.0)).xyz);
		tangent = normalize((viewMatrix * vec4(tangent,0.0)).xyz);
		bitangent =  normalize((viewMatrix * vec4(bitangent,0.0)).xyz);
	    
	    mat3 toTangentSpace = mat3(
			tangent.x, bitangent.x, normal.x,
			tangent.y, bitangent.y, normal.y,
			tangent.z, bitangent.z, normal.z
		);
	
	// Lighting
		for(int i=0; i < numLights;i++){
			vec3 lightPositionEyeSpace = (viewMatrix * vec4(lightPosition[i], 1.0)).xyz;
			toLightVector[i] = toTangentSpace * (lightPositionEyeSpace - positionRelativeToCamera.xyz);
		}
		toCameraVector = toTangentSpace * (-positionRelativeToCamera.xyz);
	
	
	// Fog
		float distance = length(positionRelativeToCamera.xyz);
		visibility = exp(-pow((distance * density), gradient));
		visibility = clamp(visibility, 0.0, 1.0);
}



//http://ogldev.atspace.co.uk/www/tutorial30/tutorial30.html